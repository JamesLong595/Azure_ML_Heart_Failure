# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i_6FoA2KSA3dqcVzGCiNAfBjUQbAgInF
"""

import pandas as pd
import numpy as np
from google.colab import files

uploaded = files.upload()

df = pd.read_csv("heart_failure_patient_data.csv")
df

df = df.dropna(axis = 0, how = 'any')

X = df.drop(columns=['Event'],axis = 1)

Y = df.Event

df.corr().style.background_gradient(cmap='coolwarm')

import matplotlib.pyplot as plt
import sklearn.model_selection
from sklearn.linear_model import LogisticRegression
from sklearn import metrics
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error

X_train, X_test, Y_train, Y_test = sklearn.model_selection.train_test_split(X, Y, test_size = 0.20, random_state = 5)

lm = LinearRegression()
lm.fit(X_train, Y_train)

Y_pred_lm = lm.predict(X_test)

mean_squared_error(Y_test,Y_pred_lm)

dtc = DecisionTreeClassifier()
dtc.fit(X_train, Y_train)
predictions = dtc.predict(X_test)
accuracy_dtc = accuracy_score(Y_test, predictions)
accuracy_dtc

from sklearn import preprocessing
X = X.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(X)
X_scaled = pd.DataFrame(x_scaled)
X_scaled

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, stratify = df.Event, random_state=0)
logreg = LogisticRegression()
logreg.fit(X_train, Y_train)

Y_pred_logreg = logreg.predict(X_test)
accuracy_logreg = accuracy_score(Y_test, Y_pred_logreg)
accuracy_logreg

from sklearn.metrics import confusion_matrix
confusion_matrix = confusion_matrix(Y_test,Y_pred_logreg)
confusion_matrix

from sklearn.model_selection import GridSearchCV
from sklearn import svm
param_grid = {
    'kernel': ['linear', 'poly', 'rbf','sigmoid'],
    'C': [0.1, 0.5, 1, 1.25, 1.5, 2, 2.1], 
}

sv = svm.SVC()

grid_search = GridSearchCV(estimator = sv, param_grid = param_grid, 
                          cv = 5)
grid_search.fit(X_train, Y_train)
grid_search.best_params_

clf = svm.SVC(kernel='linear', C=1.5) 
clf.fit(X_train, Y_train)
y_pred = clf.predict(X_test)
accuracy = accuracy_score(Y_test, y_pred)
accuracy

from sklearn.neighbors import KNeighborsClassifier
knnmodel=KNeighborsClassifier(n_neighbors=5)
knnmodel.fit(X_train,Y_train)
Y_predict2=knnmodel.predict(X_test)
accuracy_score(Y_test,Y_predict2)